<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>Welcome to PARADISEO-Moving Objects</title>
    <filename>main</filename>
    <docanchor file="main">Paradiseo</docanchor>
    <docanchor file="main">authors</docanchor>
    <docanchor file="main">Introduction</docanchor>
    <docanchor file="main">LICENSE</docanchor>
    <docanchor file="main">Installation</docanchor>
  </compound>
  <compound kind="class">
    <name>moAlgo</name>
    <filename>classmo_algo.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
  </compound>
  <compound kind="class">
    <name>moAspirCrit</name>
    <filename>classmo_aspir_crit.html</filename>
    <templarg>M</templarg>
    <base>eoBF</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classmo_aspir_crit.html</anchorfile>
      <anchor>a8ce84510a5ec7c9078381e542c6d140</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moBestImprSelect</name>
    <filename>classmo_best_impr_select.html</filename>
    <templarg>M</templarg>
    <base>moMoveSelect</base>
    <member kind="typedef">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_best_impr_select.html</anchorfile>
      <anchor>c4ae17435221fb0a8e8acd285210cfcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classmo_best_impr_select.html</anchorfile>
      <anchor>83f961549986b8ad94692e433aa79114</anchor>
      <arglist>(const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classmo_best_impr_select.html</anchorfile>
      <anchor>5c0729fd316b0ef78406bce5ca91de2a</anchor>
      <arglist>(const M &amp;_move, const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmo_best_impr_select.html</anchorfile>
      <anchor>33b3de7bd322f737eb97cce9a5404527</anchor>
      <arglist>(M &amp;_move, Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>first_time</name>
      <anchorfile>classmo_best_impr_select.html</anchorfile>
      <anchor>352b14d206b0772eb9f40efb7beb0f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M</type>
      <name>best_move</name>
      <anchorfile>classmo_best_impr_select.html</anchorfile>
      <anchor>bd86f70519f954c07ff0d8a2a3a8ff6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>best_fitness</name>
      <anchorfile>classmo_best_impr_select.html</anchorfile>
      <anchor>e51345fe28ca7cbaca65bdad1aa8ecb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moComparator</name>
    <filename>classmo_comparator.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF</base>
  </compound>
  <compound kind="class">
    <name>moCoolingSchedule</name>
    <filename>classmo_cooling_schedule.html</filename>
    <base>eoUF&lt; double &amp;, bool &gt;</base>
  </compound>
  <compound kind="class">
    <name>moExponentialCoolingSchedule</name>
    <filename>classmo_exponential_cooling_schedule.html</filename>
    <base>moCoolingSchedule</base>
    <member kind="function">
      <type></type>
      <name>moExponentialCoolingSchedule</name>
      <anchorfile>classmo_exponential_cooling_schedule.html</anchorfile>
      <anchor>e60ce9eb5e632f4758ea96ae92a52774</anchor>
      <arglist>(double _threshold, double _ratio)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_exponential_cooling_schedule.html</anchorfile>
      <anchor>95b075e9786a5cc984ef1bb59a2107e4</anchor>
      <arglist>(double &amp;_temperature)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>threshold</name>
      <anchorfile>classmo_exponential_cooling_schedule.html</anchorfile>
      <anchor>8d4327c0bb33b7121a322279eea97f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ratio</name>
      <anchorfile>classmo_exponential_cooling_schedule.html</anchorfile>
      <anchor>e8f3f87417c1c7253efb938a740846fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moFirstImprSelect</name>
    <filename>classmo_first_impr_select.html</filename>
    <templarg>M</templarg>
    <base>moMoveSelect</base>
    <member kind="typedef">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_first_impr_select.html</anchorfile>
      <anchor>64763ce3e6d2873266624382b407fa5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classmo_first_impr_select.html</anchorfile>
      <anchor>a923437ecc3db50e7052b002a9a1bbf8</anchor>
      <arglist>(const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classmo_first_impr_select.html</anchorfile>
      <anchor>f68b7ee7b35bf7347c16006f0587d313</anchor>
      <arglist>(const M &amp;_move, const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmo_first_impr_select.html</anchorfile>
      <anchor>976569efd882886cb13184daeba79766</anchor>
      <arglist>(M &amp;_move, Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classmo_first_impr_select.html</anchorfile>
      <anchor>a99c0586ba07449234705c17a258d58c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M</type>
      <name>best_move</name>
      <anchorfile>classmo_first_impr_select.html</anchorfile>
      <anchor>dfed419a608dd7c41f07fa1f1279cb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>initial_fitness</name>
      <anchorfile>classmo_first_impr_select.html</anchorfile>
      <anchor>669f8f2f74e71bf2b7fdabfc9cca2c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>best_fitness</name>
      <anchorfile>classmo_first_impr_select.html</anchorfile>
      <anchor>287937f5c059b078ccec94e86e0a8238</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moFitComparator</name>
    <filename>classmo_fit_comparator.html</filename>
    <templarg>EOT</templarg>
    <base>moComparator</base>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_fit_comparator.html</anchorfile>
      <anchor>c920d5a49deb16710daf1e5fcde6b16c</anchor>
      <arglist>(const EOT &amp;_solution1, const EOT &amp;_solution2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moFitSolContinue</name>
    <filename>classmo_fit_sol_continue.html</filename>
    <templarg>EOT</templarg>
    <base>moSolContinue</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_fit_sol_continue.html</anchorfile>
      <anchor>369ed94a788d8bdc08d5554f7669376f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moFitSolContinue</name>
      <anchorfile>classmo_fit_sol_continue.html</anchorfile>
      <anchor>5f0dc5e529e8cd307ff4a1ae982d5b84</anchor>
      <arglist>(Fitness _fitness)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_fit_sol_continue.html</anchorfile>
      <anchor>ce4e02895c13bfd131fc759adf83798f</anchor>
      <arglist>(const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classmo_fit_sol_continue.html</anchorfile>
      <anchor>670bd895b4edfcd3aebb40d2295d7f7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>fitness</name>
      <anchorfile>classmo_fit_sol_continue.html</anchorfile>
      <anchor>87d0ba8f2f76f61c89317eed5f094dfc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moGenSolContinue</name>
    <filename>classmo_gen_sol_continue.html</filename>
    <templarg>EOT</templarg>
    <base>moSolContinue</base>
    <member kind="function">
      <type></type>
      <name>moGenSolContinue</name>
      <anchorfile>classmo_gen_sol_continue.html</anchorfile>
      <anchor>8e2456421b641d38e3f800f3bbe45159</anchor>
      <arglist>(unsigned int _generationMaximumNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_gen_sol_continue.html</anchorfile>
      <anchor>2fd5f2f10b6d6208412582578fad48ea</anchor>
      <arglist>(const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classmo_gen_sol_continue.html</anchorfile>
      <anchor>6c5db8182157584b56507cc9075602d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>generationMaximumNumber</name>
      <anchorfile>classmo_gen_sol_continue.html</anchorfile>
      <anchor>c838d923436b71c584891c1cbe3f47ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>generationNumber</name>
      <anchorfile>classmo_gen_sol_continue.html</anchorfile>
      <anchor>af0b3e5ca3ceee0d843670955c8f1e58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moHC</name>
    <filename>classmo_h_c.html</filename>
    <templarg>M</templarg>
    <base>moAlgo&lt; M::EOType &gt;</base>
    <member kind="function">
      <type></type>
      <name>moHC</name>
      <anchorfile>classmo_h_c.html</anchorfile>
      <anchor>44a35bd30df6e79cff95a31b84889bd7</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moMoveSelect&lt; M &gt; &amp;_move_selection, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moHC</name>
      <anchorfile>classmo_h_c.html</anchorfile>
      <anchor>5002f969ef0a4d959610158fc62f137a</anchor>
      <arglist>(moMoveExpl&lt; M &gt; &amp;_move_explorer, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_h_c.html</anchorfile>
      <anchor>b739f9586b647e32bf31605066f984ad</anchor>
      <arglist>(EOT &amp;_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchorfile>classmo_h_c.html</anchorfile>
      <anchor>d219296ede03c679646bce2fe8ff96cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_h_c.html</anchorfile>
      <anchor>56487c97a7cf0c423cc879d1bbd45027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveExpl&lt; M &gt; &amp;</type>
      <name>move_explorer</name>
      <anchorfile>classmo_h_c.html</anchorfile>
      <anchor>ec4e702a6ec240f40ff9d262c36d080b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>full_evaluation</name>
      <anchorfile>classmo_h_c.html</anchorfile>
      <anchor>1175c588c19d3658cfc690d5f3f8d825</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moHCMoveLoopExpl</name>
    <filename>classmo_h_c_move_loop_expl.html</filename>
    <templarg>M</templarg>
    <base>moMoveLoopExpl</base>
    <member kind="function">
      <type></type>
      <name>moHCMoveLoopExpl</name>
      <anchorfile>classmo_h_c_move_loop_expl.html</anchorfile>
      <anchor>fac2eb6695ba1b797ffab4f290d760b8</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moMoveSelect&lt; M &gt; &amp;_move_selection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmo_h_c_move_loop_expl.html</anchorfile>
      <anchor>fe9362c10d74a5e6ed09b56345396192</anchor>
      <arglist>(const EOT &amp;_old_solution, EOT &amp;_new_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchorfile>classmo_h_c_move_loop_expl.html</anchorfile>
      <anchor>077befd4106c201eafd3ea22bcea2fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_h_c_move_loop_expl.html</anchorfile>
      <anchor>f24871224316d5549b9013a2d27ab465</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveInit&lt; M &gt; &amp;</type>
      <name>move_initializer</name>
      <anchorfile>classmo_h_c_move_loop_expl.html</anchorfile>
      <anchor>17506f3f1172714f9adbfa4e8a15953a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moNextMove&lt; M &gt; &amp;</type>
      <name>next_move_generator</name>
      <anchorfile>classmo_h_c_move_loop_expl.html</anchorfile>
      <anchor>fdc44d40d8859bae1d7b92e77f36aa30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveIncrEval&lt; M &gt; &amp;</type>
      <name>incremental_evaluation</name>
      <anchorfile>classmo_h_c_move_loop_expl.html</anchorfile>
      <anchor>a044b28f972d007a22736b646d86f265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveSelect&lt; M &gt; &amp;</type>
      <name>move_selection</name>
      <anchorfile>classmo_h_c_move_loop_expl.html</anchorfile>
      <anchor>5f0532e0ee8ef8ecaeeb4e56342be443</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moILS</name>
    <filename>classmo_i_l_s.html</filename>
    <templarg>M</templarg>
    <base>moAlgo&lt; M::EOType &gt;</base>
    <member kind="function">
      <type></type>
      <name>moILS</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>c83f81ba0836ae262305efa15eeb3da2</anchor>
      <arglist>(moAlgo&lt; EOT &gt; &amp;_algorithm, moSolContinue&lt; EOT &gt; &amp;_continue, moComparator&lt; EOT &gt; &amp;_acceptance_criterion, eoMonOp&lt; EOT &gt; &amp;_perturbation, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moILS</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>6d684a1d13ad224a911c8b0277812297</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moMoveSelect&lt; M &gt; &amp;_move_selection, moSolContinue&lt; EOT &gt; &amp;_continue, moComparator&lt; EOT &gt; &amp;_acceptance_criterion, eoMonOp&lt; EOT &gt; &amp;_perturbation, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moILS</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>740ac81a0d06eb471592ba0861d3a6d7</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moTabuList&lt; M &gt; &amp;_tabu_list, moAspirCrit&lt; M &gt; &amp;_aspiration_criterion, moSolContinue&lt; EOT &gt; &amp;_moTS_continue, moSolContinue&lt; EOT &gt; &amp;_continue, moComparator&lt; EOT &gt; &amp;_acceptance_criterion, eoMonOp&lt; EOT &gt; &amp;_perturbation, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moILS</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>36bab16abf36957dac36c467b86385bc</anchor>
      <arglist>(moRandMove&lt; M &gt; &amp;_random_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moSolContinue&lt; EOT &gt; &amp;_moSA_continue, double _initial_temperature, moCoolingSchedule &amp;_cooling_schedule, moSolContinue&lt; EOT &gt; &amp;_continue, moComparator&lt; EOT &gt; &amp;_acceptance_criterion, eoMonOp&lt; EOT &gt; &amp;_perturbation, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>3f6b950e5a6c363f04b8d4c259502488</anchor>
      <arglist>(EOT &amp;_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>c81bafc611e4d4fd44347cf7162198c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>8c464a9eae064a78eff75d4c722b619c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moAlgo&lt; EOT &gt; &amp;</type>
      <name>algorithm</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>5651a4d94b59d523d341d5d6e24ca311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moSolContinue&lt; EOT &gt; &amp;</type>
      <name>continu</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>30edab439401d7ec04fd8d37b4513d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moComparator&lt; EOT &gt; &amp;</type>
      <name>acceptance_criterion</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>295f6d0342c67bd3dc4cb82e2adc26be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMonOp&lt; EOT &gt; &amp;</type>
      <name>perturbation</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>f667a1bda06b6d221292df9aba3db8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>full_evaluation</name>
      <anchorfile>classmo_i_l_s.html</anchorfile>
      <anchor>8e8c383ac6ec34aaf071fa18bb54be67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moImprBestFitAspirCrit</name>
    <filename>classmo_impr_best_fit_aspir_crit.html</filename>
    <templarg>M</templarg>
    <base>moAspirCrit</base>
    <member kind="typedef">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_impr_best_fit_aspir_crit.html</anchorfile>
      <anchor>0bc1a8c9af99781e662570c04750cca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moImprBestFitAspirCrit</name>
      <anchorfile>classmo_impr_best_fit_aspir_crit.html</anchorfile>
      <anchor>e2c697a5cf3a7696e38bb52b6694a340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classmo_impr_best_fit_aspir_crit.html</anchorfile>
      <anchor>ffa451a14ff4ea86fb8bd9fdbc348630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_impr_best_fit_aspir_crit.html</anchorfile>
      <anchor>b6e5e96d57a6b846033fc22a9951b067</anchor>
      <arglist>(const M &amp;_move, const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>best_fitness</name>
      <anchorfile>classmo_impr_best_fit_aspir_crit.html</anchorfile>
      <anchor>03230e8672389de65aacd2bf7b6c1184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>first_time</name>
      <anchorfile>classmo_impr_best_fit_aspir_crit.html</anchorfile>
      <anchor>2d5226c7dd661b33011402dbbbe78265</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moItRandNextMove</name>
    <filename>classmo_it_rand_next_move.html</filename>
    <templarg>M</templarg>
    <base>moNextMove</base>
    <member kind="function">
      <type></type>
      <name>moItRandNextMove</name>
      <anchorfile>classmo_it_rand_next_move.html</anchorfile>
      <anchor>c27b1fb0d64d4862dd886f7a59419b8c</anchor>
      <arglist>(moRandMove&lt; M &gt; &amp;_random_move_generator, unsigned int _iteration_maximum_number)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_it_rand_next_move.html</anchorfile>
      <anchor>21454db723a12fe6c8eb5caeccd32df6</anchor>
      <arglist>(M &amp;_move, const EOT &amp;_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchorfile>classmo_it_rand_next_move.html</anchorfile>
      <anchor>ee666007fc494bf4a5f0cd065e5671cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moRandMove&lt; M &gt; &amp;</type>
      <name>random_move_generator</name>
      <anchorfile>classmo_it_rand_next_move.html</anchorfile>
      <anchor>92601819402ad00d01933113d0bcf40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>iteration_maximum_number</name>
      <anchorfile>classmo_it_rand_next_move.html</anchorfile>
      <anchor>1b06067aee7a78f8a255563391514d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>iteration_number</name>
      <anchorfile>classmo_it_rand_next_move.html</anchorfile>
      <anchor>2f8d52c88d6c002be518091cc52beca1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moLinearCoolingSchedule</name>
    <filename>classmo_linear_cooling_schedule.html</filename>
    <base>moCoolingSchedule</base>
    <member kind="function">
      <type></type>
      <name>moLinearCoolingSchedule</name>
      <anchorfile>classmo_linear_cooling_schedule.html</anchorfile>
      <anchor>420939ebf57f01d242cbe4eb668dffde</anchor>
      <arglist>(double _threshold, double _quantity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_linear_cooling_schedule.html</anchorfile>
      <anchor>b0a1886aaa7ee2a0c8e929e55ca321ce</anchor>
      <arglist>(double &amp;_current_temperature)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>threshold</name>
      <anchorfile>classmo_linear_cooling_schedule.html</anchorfile>
      <anchor>e7f539f986801ea71392c4a55ba08a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>quantity</name>
      <anchorfile>classmo_linear_cooling_schedule.html</anchorfile>
      <anchor>6159dc39ceda89b23ffdab3d6ce8d8ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moLSCheckPoint</name>
    <filename>classmo_l_s_check_point.html</filename>
    <templarg>M</templarg>
    <base>eoBF</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmo_l_s_check_point.html</anchorfile>
      <anchor>e9b9d41e40dd7bab648327686b2b938d</anchor>
      <arglist>(const M &amp;_move, const typename M::EOType &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classmo_l_s_check_point.html</anchorfile>
      <anchor>f95f2dc556cdfbdc81688562ca95202d</anchor>
      <arglist>(eoBF&lt; const M &amp;, const typename M::EOType &amp;, void &gt; &amp;_function)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoBF&lt; const M &amp;, const typename M::EOType &amp;, void &gt; * &gt;</type>
      <name>functions</name>
      <anchorfile>classmo_l_s_check_point.html</anchorfile>
      <anchor>56a7427a6aebac7955c22bab302c050a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moMove</name>
    <filename>classmo_move.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; EOT &amp;, void &gt;</base>
    <member kind="typedef">
      <type>EOT</type>
      <name>EOType</name>
      <anchorfile>classmo_move.html</anchorfile>
      <anchor>7fb853a91ba1319530529e515380bbba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moMoveExpl</name>
    <filename>classmo_move_expl.html</filename>
    <templarg>M</templarg>
    <base>eoBF&lt; const M::EOType &amp;, M::EOType &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>moMoveIncrEval</name>
    <filename>classmo_move_incr_eval.html</filename>
    <templarg>M</templarg>
    <base>eoBF</base>
  </compound>
  <compound kind="class">
    <name>moMoveInit</name>
    <filename>classmo_move_init.html</filename>
    <templarg>M</templarg>
    <base>eoBF</base>
  </compound>
  <compound kind="class">
    <name>moMoveLoopExpl</name>
    <filename>classmo_move_loop_expl.html</filename>
    <templarg>M</templarg>
    <base>moMoveExpl</base>
  </compound>
  <compound kind="class">
    <name>moMoveSelect</name>
    <filename>classmo_move_select.html</filename>
    <templarg>M</templarg>
    <base>eoBF&lt; M &amp;, M::EOType::Fitness &amp;, void &gt;</base>
    <member kind="typedef">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_move_select.html</anchorfile>
      <anchor>8148ccc0e6fbd209c3fe6829559895c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classmo_move_select.html</anchorfile>
      <anchor>58038bd859632c1bd022d23d9792bdca</anchor>
      <arglist>(const Fitness &amp;_fitness)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>update</name>
      <anchorfile>classmo_move_select.html</anchorfile>
      <anchor>5b4d3b2f030cca80c563c3db0c4af404</anchor>
      <arglist>(const M &amp;_move, const Fitness &amp;_fitness)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moNextMove</name>
    <filename>classmo_next_move.html</filename>
    <templarg>M</templarg>
    <base>eoBF</base>
  </compound>
  <compound kind="class">
    <name>moNoAspirCrit</name>
    <filename>classmo_no_aspir_crit.html</filename>
    <templarg>M</templarg>
    <base>moAspirCrit</base>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_no_aspir_crit.html</anchorfile>
      <anchor>289aac56f03c4651fcbcec4a91fb6fd6</anchor>
      <arglist>(const M &amp;_move, const typename M::EOType::Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>classmo_no_aspir_crit.html</anchorfile>
      <anchor>f3a286fc4c2d36bd390ba9a3074f3037</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moNoFitImprSolContinue</name>
    <filename>classmo_no_fit_impr_sol_continue.html</filename>
    <templarg>EOT</templarg>
    <base>moSolContinue</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_no_fit_impr_sol_continue.html</anchorfile>
      <anchor>64c184de66bb37d75d53aa600ac947b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moNoFitImprSolContinue</name>
      <anchorfile>classmo_no_fit_impr_sol_continue.html</anchorfile>
      <anchor>0793f68a0ad558c8203b97c33c8f9c90</anchor>
      <arglist>(unsigned int _maxNumberOfIterationWithoutImprovement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_no_fit_impr_sol_continue.html</anchorfile>
      <anchor>d8966c73cbe625644df9061377f7221a</anchor>
      <arglist>(const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classmo_no_fit_impr_sol_continue.html</anchorfile>
      <anchor>21641c0a38a4501baae6133cbc591de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>maxNumberOfIterationsWithoutImprovement</name>
      <anchorfile>classmo_no_fit_impr_sol_continue.html</anchorfile>
      <anchor>03612ffc3af9d943c1b1d2cde09d461b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstFitnessSaved</name>
      <anchorfile>classmo_no_fit_impr_sol_continue.html</anchorfile>
      <anchor>ca3591e47a075b59e0826f31234c71ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>fitness</name>
      <anchorfile>classmo_no_fit_impr_sol_continue.html</anchorfile>
      <anchor>3d3d2b43a4dd73e38689cc0018d44ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>counter</name>
      <anchorfile>classmo_no_fit_impr_sol_continue.html</anchorfile>
      <anchor>46fc008a8f7cd06dcaaeb4016b433adb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moRandImprSelect</name>
    <filename>classmo_rand_impr_select.html</filename>
    <templarg>M</templarg>
    <base>moMoveSelect</base>
    <member kind="typedef">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_rand_impr_select.html</anchorfile>
      <anchor>3bff2fdb963297430543c82ffb567a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classmo_rand_impr_select.html</anchorfile>
      <anchor>7af99966b31aa387ecef74fd307a42e8</anchor>
      <arglist>(const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classmo_rand_impr_select.html</anchorfile>
      <anchor>b20cfd0164266aa75960cba3c1673f69</anchor>
      <arglist>(const M &amp;_move, const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmo_rand_impr_select.html</anchorfile>
      <anchor>1bc88f10830960c1d88e22e444c4e670</anchor>
      <arglist>(M &amp;_move, Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>initial_fitness</name>
      <anchorfile>classmo_rand_impr_select.html</anchorfile>
      <anchor>d566fa23689861b1d04257e53c71ae20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Fitness &gt;</type>
      <name>better_fitnesses</name>
      <anchorfile>classmo_rand_impr_select.html</anchorfile>
      <anchor>220d6e3db838b11938e59bc7b29a0db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; M &gt;</type>
      <name>better_moves</name>
      <anchorfile>classmo_rand_impr_select.html</anchorfile>
      <anchor>8a2e7bd7d7a74d7f7402ef25737b09e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moRandMove</name>
    <filename>classmo_rand_move.html</filename>
    <templarg>M</templarg>
    <base>eoUF&lt; M &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>moSA</name>
    <filename>classmo_s_a.html</filename>
    <templarg>M</templarg>
    <base>moAlgo&lt; M::EOType &gt;</base>
    <member kind="function">
      <type></type>
      <name>moSA</name>
      <anchorfile>classmo_s_a.html</anchorfile>
      <anchor>12e7da3a56b82daa29a30d1254da5823</anchor>
      <arglist>(moRandMove&lt; M &gt; &amp;_random_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moSolContinue&lt; EOT &gt; &amp;_continue, double _initial_temperature, moCoolingSchedule &amp;_cooling_schedule, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_s_a.html</anchorfile>
      <anchor>bea8176b0c05a96696b2ab29d3f3c544</anchor>
      <arglist>(EOT &amp;_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchorfile>classmo_s_a.html</anchorfile>
      <anchor>d5d64a8797bdedc7b3af7893aded0bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_s_a.html</anchorfile>
      <anchor>97f1a40d5ab5a0b3f878d0347b34804b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moRandMove&lt; M &gt; &amp;</type>
      <name>random_move_generator</name>
      <anchorfile>classmo_s_a.html</anchorfile>
      <anchor>92656523f556669862fcffdccea178dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveIncrEval&lt; M &gt; &amp;</type>
      <name>incremental_evaluation</name>
      <anchorfile>classmo_s_a.html</anchorfile>
      <anchor>fdb49f837dc602624554279418c94bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moSolContinue&lt; EOT &gt; &amp;</type>
      <name>continu</name>
      <anchorfile>classmo_s_a.html</anchorfile>
      <anchor>776586a839c2bbd6d12a731c12a1b748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initial_temperature</name>
      <anchorfile>classmo_s_a.html</anchorfile>
      <anchor>e07bf4ca64248e94ab85e8a1ba32aa8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moCoolingSchedule &amp;</type>
      <name>cooling_schedule</name>
      <anchorfile>classmo_s_a.html</anchorfile>
      <anchor>f514ae01cdfc67bf0b87d5389b3792e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>full_evaluation</name>
      <anchorfile>classmo_s_a.html</anchorfile>
      <anchor>ace30095ffc4924d84e14a0e59f7746f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moSimpleMoveTabuList</name>
    <filename>classmo_simple_move_tabu_list.html</filename>
    <templarg>M</templarg>
    <base>moTabuList</base>
    <member kind="typedef">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>91286ff3ba6b1e9e1db9e4fdade2edb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; M &gt;::iterator</type>
      <name>moveIterator</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>4ca9387c0a20bb9f4142682cbfee26bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moSimpleMoveTabuList</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>c27e7fabe1370ea65f56981c5cbc1769</anchor>
      <arglist>(unsigned int _memory_maximum_size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>8d38f296f3d7721025820f16f25fcf7e</anchor>
      <arglist>(const M &amp;_move, const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>e6c0835fbfab2bdc63097cf2fd5328aa</anchor>
      <arglist>(const M &amp;_move, const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>96cffc8118456ed762b07b9fc0e0679f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>b91ae9971be30769757d1ad92c6009dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeMove</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>922ac2e3c45cbb94698517265be95de5</anchor>
      <arglist>(const M &amp;_move)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>memory_maximum_size</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>fea7fe7c62a6da9b8f087a2732f44251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>memory_size</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>defd20fe6d0d51fdaedbc5b95018aea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; M &gt;</type>
      <name>tabuList</name>
      <anchorfile>classmo_simple_move_tabu_list.html</anchorfile>
      <anchor>d91bc838361524720616b44eda9b2c3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moSimpleSolutionTabuList</name>
    <filename>classmo_simple_solution_tabu_list.html</filename>
    <templarg>M</templarg>
    <base>moTabuList</base>
    <member kind="typedef">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>881060871a6b49e5e8554c5df85176d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; EOT &gt;::iterator</type>
      <name>solutionIterator</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>3438db9ed9e1a94a24c418d8cbadec54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moSimpleSolutionTabuList</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>8499bf947de47519d155e9e45f815d41</anchor>
      <arglist>(unsigned int _memory_maximum_size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>9052858ae3e6765cbe4c344bdae6c692</anchor>
      <arglist>(const M &amp;_move, const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>58ae13e7642c429ea51ff679a932aceb</anchor>
      <arglist>(const M &amp;_move, const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>91b8b01dba7ffea8b63765d931e56f56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>d5645c39fec71a6110a2cbccbb08b816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeSolution</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>e4a57001a201e1fb7446902381a7ac7d</anchor>
      <arglist>(const EOT &amp;_solution)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>memory_maximum_size</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>06631e7b9a2511e3c11540aa14b9e636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>memory_size</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>0d54e6b0af0e6088aafae596392c9490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; EOT &gt;</type>
      <name>tabuList</name>
      <anchorfile>classmo_simple_solution_tabu_list.html</anchorfile>
      <anchor>75df9cd683528d3722d02bac407b710b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moSolContinue</name>
    <filename>classmo_sol_continue.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; const EOT &amp;, bool &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classmo_sol_continue.html</anchorfile>
      <anchor>064dc966a210f4ffb9515be3f03ca4c7</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moSteadyFitSolContinue</name>
    <filename>classmo_steady_fit_sol_continue.html</filename>
    <templarg>EOT</templarg>
    <base>moSolContinue</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_steady_fit_sol_continue.html</anchorfile>
      <anchor>c289721abbbafe50f6e3b8305dd31007</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moSteadyFitSolContinue</name>
      <anchorfile>classmo_steady_fit_sol_continue.html</anchorfile>
      <anchor>c5e0e998b73e3a48ca3e87f4f816569b</anchor>
      <arglist>(unsigned int _maxNumberOfIterations, unsigned int _maxNumberOfIterationWithoutImprovement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_steady_fit_sol_continue.html</anchorfile>
      <anchor>f7432bccb768d50a2fef248c2b174904</anchor>
      <arglist>(const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classmo_steady_fit_sol_continue.html</anchorfile>
      <anchor>87563493addc8e4b58982c55a67179b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>maxNumberOfIterations</name>
      <anchorfile>classmo_steady_fit_sol_continue.html</anchorfile>
      <anchor>36b43c2a252887ad027165ac32393fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>maxNumberOfIterationsWithoutImprovement</name>
      <anchorfile>classmo_steady_fit_sol_continue.html</anchorfile>
      <anchor>cde593c09f497a5fa66ff62732544f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>maxNumberOfIterationsReached</name>
      <anchorfile>classmo_steady_fit_sol_continue.html</anchorfile>
      <anchor>7d88c0eb91b2a12121ba1c3ae9139887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstFitnessSaved</name>
      <anchorfile>classmo_steady_fit_sol_continue.html</anchorfile>
      <anchor>025bf2789e470fdde989eee9121035c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>fitness</name>
      <anchorfile>classmo_steady_fit_sol_continue.html</anchorfile>
      <anchor>a5c62e7049b36f6e71e92b559568c09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>counter</name>
      <anchorfile>classmo_steady_fit_sol_continue.html</anchorfile>
      <anchor>245c9099a2c40dfc4f34b3ff216d13ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moTabuList</name>
    <filename>classmo_tabu_list.html</filename>
    <templarg>M</templarg>
    <base>eoBF</base>
    <member kind="typedef">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchorfile>classmo_tabu_list.html</anchorfile>
      <anchor>e219715cc3fdd5626764bc50ce6357df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classmo_tabu_list.html</anchorfile>
      <anchor>55204939b6d67b6d37b4af725d70cf6d</anchor>
      <arglist>(const M &amp;_move, const EOT &amp;_solution)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classmo_tabu_list.html</anchorfile>
      <anchor>a2e5d1132f064093c8ed57046405f5ca</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classmo_tabu_list.html</anchorfile>
      <anchor>0a06c459d56e8e2b408a8f3c6aec4e57</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moTS</name>
    <filename>classmo_t_s.html</filename>
    <templarg>M</templarg>
    <base>moAlgo&lt; M::EOType &gt;</base>
    <member kind="function">
      <type></type>
      <name>moTS</name>
      <anchorfile>classmo_t_s.html</anchorfile>
      <anchor>336408ddf8b7a29ffa8e01e9c18d8e10</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moTabuList&lt; M &gt; &amp;_tabu_list, moAspirCrit&lt; M &gt; &amp;_aspiration_criterion, moSolContinue&lt; EOT &gt; &amp;_continue, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moTS</name>
      <anchorfile>classmo_t_s.html</anchorfile>
      <anchor>7e435fac1b8d5a410b7374d114e005e2</anchor>
      <arglist>(moMoveExpl&lt; M &gt; &amp;_move_explorer, moSolContinue&lt; EOT &gt; &amp;_continue, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classmo_t_s.html</anchorfile>
      <anchor>2a011779723e24a5132a37593775bf56</anchor>
      <arglist>(EOT &amp;_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchorfile>classmo_t_s.html</anchorfile>
      <anchor>90d19d468c12ab5bd796948ce1ce79b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_t_s.html</anchorfile>
      <anchor>aa0eefbb17111422e495d1255f876fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveExpl&lt; M &gt; &amp;</type>
      <name>move_explorer</name>
      <anchorfile>classmo_t_s.html</anchorfile>
      <anchor>9fd948a2c586f1991f5a1eee927af8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moSolContinue&lt; EOT &gt; &amp;</type>
      <name>continu</name>
      <anchorfile>classmo_t_s.html</anchorfile>
      <anchor>962a37393faf5239e657388d375cd9b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>full_evaluation</name>
      <anchorfile>classmo_t_s.html</anchorfile>
      <anchor>f44bb408007e2bff99f7a201842e8e48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moTSMoveLoopExpl</name>
    <filename>classmo_t_s_move_loop_expl.html</filename>
    <templarg>M</templarg>
    <base>moMoveLoopExpl</base>
    <member kind="function">
      <type></type>
      <name>moTSMoveLoopExpl</name>
      <anchorfile>classmo_t_s_move_loop_expl.html</anchorfile>
      <anchor>be5cf0853777718c3bbcbef456b50bc7</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moTabuList&lt; M &gt; &amp;_tabu_list, moAspirCrit&lt; M &gt; &amp;_aspiration_criterion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmo_t_s_move_loop_expl.html</anchorfile>
      <anchor>853743f2e21def3ea129556f47fafa55</anchor>
      <arglist>(const EOT &amp;_old_solution, EOT &amp;_new_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchorfile>classmo_t_s_move_loop_expl.html</anchorfile>
      <anchor>47f42225e2ed096374b818bdb848a527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchorfile>classmo_t_s_move_loop_expl.html</anchorfile>
      <anchor>a1ba36c937b195ca2f7d1a24adaa7018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveInit&lt; M &gt; &amp;</type>
      <name>move_initializer</name>
      <anchorfile>classmo_t_s_move_loop_expl.html</anchorfile>
      <anchor>cd680d22382b9941d2c34133a641d443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moNextMove&lt; M &gt; &amp;</type>
      <name>next_move_generator</name>
      <anchorfile>classmo_t_s_move_loop_expl.html</anchorfile>
      <anchor>a2bbb593af2beefb05a307277c22b3d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveIncrEval&lt; M &gt; &amp;</type>
      <name>incremental_evaluation</name>
      <anchorfile>classmo_t_s_move_loop_expl.html</anchorfile>
      <anchor>491fa46e1cb7935cb515b27b85bf8765</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moBestImprSelect&lt; M &gt;</type>
      <name>move_selection</name>
      <anchorfile>classmo_t_s_move_loop_expl.html</anchorfile>
      <anchor>1caa6939fbe65ec4255e9e6dc3ce333b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moTabuList&lt; M &gt; &amp;</type>
      <name>tabu_list</name>
      <anchorfile>classmo_t_s_move_loop_expl.html</anchorfile>
      <anchor>0e5988a940ba218e87c53b7e56d79790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moAspirCrit&lt; M &gt; &amp;</type>
      <name>aspiration_criterion</name>
      <anchorfile>classmo_t_s_move_loop_expl.html</anchorfile>
      <anchor>bdfc8efb22599c150b3c3d44cd416b09</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
