#!/usr/bin/env ruby

require File.join File.dirname(__FILE__), 'common'

if ARGV.length != 2
  puts 'Need some arguments...'
  puts '1. an input directory'
  puts '2. an output directory'
  exit
end

input = ARGV[0]
output = ARGV[1]

unless File.exist? input
  puts 'Need a real input directory...'
  exit
end

unless File.exist? output
  puts 'Need a real output directory...'
  exit
end

Dir[File.join(input, '*')].each do |entry|
  unless File.directory? entry
    puts "Skipping a regular file '#{ entry }'..."
    next
  end

  unless entry.match /\/(\d+)_(\d+)$/
    puts "Skipping an unknow directory '#{ entry }'..."
    next
  end

  processor_count = $1.to_i
  task_count = $2.to_i

  variants = []

  Dir[File.join(entry, '*_system.config')].each do |subentry|
    variants.push subentry
  end

  out_entry = File.join output, File.basename(entry)

  unless File.directory? out_entry
    Dir.mkdir out_entry
  end

  variant_count = variants.length

  puts "Test case: %d cores, %d tasks, and %d variants" %
    [ processor_count, task_count, variant_count ]

  variants.each do |variant|
    system_config = variant

    params_config = variant.gsub /_system.config$/, '_params.config'
    unless File.exist? params_config
      puts "The genetic configuration is missing '#{ params_config }'"
      next
    end

    floorplan_config = variant.gsub /_system.config$/, '_floorplan.config'
    unless File.exist? floorplan_config
      puts "The floorplan configuration is missing '#{ floorplan_config }'"
      next
    end

    hotspot_config = variant.gsub /_system.config$/, '_hotspot.config'
    unless File.exist? hotspot_config
      puts "The thermal configuration is missing '#{ hotspot_config }'"
      next
    end

    variant.match /\/(\d+)_system\.config$/
    name = $1

    log = File.join out_entry, "#{ name }.log"

    memcache = read_param params_config, 'cache'

    start = Time.now
    puts "  - #{ name }:"
    puts "    Started #{ start.strftime 'on %Y-%m-%d at %H-%M' }"
    puts "    Logging to #{ log }"

    if memcache
      puts "    Flushing cache at #{ memcache }"
      run \
        :command => 'memflush',
        :arguments => [ "--servers=#{ memcache }" ]
    end

    begin
      run \
        :tool => [ 'tools', 'optima' ],
        :arguments => [ '-s', system_config, '-p', params_config,
          '-f', floorplan_config, '-h', hotspot_config ],
        :output => log
      success = true
    rescue
      success = false
    end

    finish = Time.now

    puts "    Finished #{ finish.strftime 'on %Y-%m-%d at %H-%M' }"
    puts "    Elapsed %.2f minutes" % [ (finish - start) / 60.0 ]
    puts '    [FAILED]' unless success

    $stdout.flush
  end
end
