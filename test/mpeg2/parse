#!/usr/bin/env ruby

if ARGV.length < 2
  puts 'Need some arguments...'
  puts '1. A task graph in the LEDA format.'
  puts '2. Architecture specification like "[ [ frequency, voltage, # of gates ], ... ]"'
  puts '3. The output format: tgff or optima'
  exit
end

n = '[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?'

NC = []
CEFF = []
LINKS = []
PIDS = []
DEADLINE = []

def new_task graph_id, task_id, nc, processor_id, ceff, priority, deadline
  NC[task_id] = nc
  CEFF[task_id] = ceff
  PIDS.push processor_id
  DEADLINE.push deadline
end

def new_edge from_graph_id, from_task_id, to_graph_id, to_task_id, type
  (LINKS[from_task_id] ||= [])[to_task_id] = 1
end

File.open(ARGV[0], 'r') do |file|
  while line = file.gets
    if line =~ %r[Task:\s*\(\s*(#{n})\s+(#{n})\s*\)\s*NC:\s*(#{n})\s+map:\s*(#{n})\s+Ceff:\s*(#{n})\s+pri:\s*(#{n})\s+Deadline:\s*(#{n})]
      new_task $1.to_i, $2.to_i, $3.to_i, $4.to_i, $5.to_f, $6.to_i, $7.to_f
    elsif line =~ %r[Task:\s*\(\s*(#{n})\s+(#{n})\s*\)\s*NC:\s*#{n}\s+NCMIN:\s*#{n}\s+NC_EXP:\s*(#{n})\s+map:\s*(#{n})\s+Ceff:\s*(#{n})\s+pri:\s*(#{n})\s+Deadline:\s*(#{n})]
      new_task $1.to_i, $2.to_i, $3.to_i, $4.to_i, $5.to_f, $6.to_i, $7.to_f
    elsif line =~ %r[Edge:\s*\(\s*(#{n})\s+(#{n})\s*\)\s*-->\s*\(\s*(#{n})\s+(#{n})\s*\)\s*etype:\s*(#{n})]
      new_edge $1.to_i, $2.to_i, $3.to_i, $4.to_i, $5.to_i
    end
  end
end

task_count = NC.length

PIDS.uniq!

platform = eval ARGV[1]
processor_count = platform.length

raise 'The platform specification is not given' if processor_count == 0

platform = platform.map do |f, v, n|
  [ f, v, n.to_i ]
end

if CEFF.all?{ |ceff| ceff == 1.0 }
  srand 0

  min_ceff = 1e-9
  max_ceff = 19e-9

  CEFF = CEFF.map { |ceff| min_ceff + rand * (max_ceff - min_ceff) }
end

if ARGV[2] == 'optima'
  puts "@type (1 x #{ task_count })"
  puts (0...task_count).to_a.join "\t"
  puts

  puts "@link (#{ task_count } x #{ task_count })"
  (0...task_count).each do |i|
    links = []
    (0...task_count).each do |j|
      links.push((LINKS[i] || [])[j].nil? ? 0 : 1)
    end
    puts links.join "\t"
  end
  puts

  puts "@frequency (1 x #{ processor_count })"
  puts platform.collect{ |p| p[0].to_i }.join "\t"
  puts

  puts "@voltage (1 x #{ processor_count })"
  puts platform.collect{ |p| p[1] }.join "\t"
  puts

  puts "@ngate (1 x #{ processor_count })"
  puts platform.collect{ |p| p[2].to_i }.join "\t"
  puts

  puts "@ceff (#{ task_count } x #{ processor_count })"
  (0...task_count).each do |i|
    puts ([ CEFF[i] ] * processor_count).join "\t"
  end
  puts

  puts "@nc (#{ task_count } x #{ processor_count })"
  (0...task_count).each do |i|
    puts ([ NC[i] ] * processor_count).join "\t"
  end
  puts
elsif ARGV[2] == 'tgff'
  puts '@TASK_GRAPH 0 {'
  (0...task_count).each do |i|
    puts "  TASK t0_#{ i } TYPE #{ i }"
  end
  puts

  arc_count = 0
  (0...task_count).each do |i|
    (0...task_count).each do |j|
      next if (LINKS[i] || [])[j].nil?
      puts "  ARC a0_#{ arc_count } FROM t0_#{ i } TO t0_#{ j } TYPE #{ arc_count }"
      arc_count += 1
    end
  end

  puts '}'
  puts

  (0...processor_count).each do |i|
    puts "@PE #{ i } {"
    puts '# frequency voltage ngate'
    puts '  ' + platform[i].join("\t")
    puts
    puts '#------------------------------------------------------------------------------'
    puts '# type version effective_switched_capacitance number_of_clock_cycles'
    (0...task_count).each do |j|
      puts '  ' + [ j, 0, CEFF[j], NC[j] ].join("\t")
    end
    puts "}"
    puts
  end
end
